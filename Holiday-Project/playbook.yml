- name: Set up load balancing and VPC
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: create vpc
      amazon.aws.ec2_vpc_net:
        name: tunrayo_vpc
        cidr_block: 10.0.0.0/16
        region: us-west-1
      register: vpc

    - name: create subnet for first az
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
        az: us-west-1a
        cidr: 10.0.1.0/28
      register: az1_uswe1

    - name: create subnet for second az
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
        az: us-west-1b
        cidr: 10.0.2.0/28
      register: az2_uswe1

    - name: create internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw

    - name: create custom route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-west-1
        subnets:
          - "{{ az1_uswe1.subnet.id }}"
          - "{{ az2_uswe1.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"

    - name: create security group
      amazon.aws.ec2_group:
        name: ssh-web
        description: allow ssh and http
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-west-1
        rules:
          - proto: tcp
            ports: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports: 80
            cidr_ip: 0.0.0.0/0

    - name: Create the ELB only listening over port 80
      ec2_elb_lb:
        name: tunrayo-load-balancer
        state: present
        region: us-west-1
        zones:
          - us-west-1a
          - us-west-1b
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

    - name: Create EC2 instances
      ec2:
        key_name: holiday-challenge
        instance_type: t2.nano
        image: ami-0ecc74eca1d66d8a6
        region: us-west-1
        group_id:
          - "{{ webservers_group.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        wait: yes
        instance_tags:
          application: holiday-challenge
        exact_count: 2
        count_tag:
          application: holiday-challenge
      register: ec2_instances

    - name: Store EC2 instance IPs to provision against
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Wait for servers to come online
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Add EC2 instances as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"

    - hosts: ec2_instance_ips
      remote_user: ubuntu
      become: True
        tasks:
        - name: Install nginx
          apt:
            name: nginx
            state: present
        - name: Create default index page
          copy:
            dest: /usr/share/nginx/html/index.html
            content: "Howdy from {{ ansible_hostname }}"
        - name: Restart nginx
          service:
            name: nginx
            state: restarted

- hosts: localhost
  tasks:
    - name: Add each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: tunrayo-load-balancer
        region: us-west-1
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_instances.tagged_instances }}"