- name: setup server
  hosts: [web]
  become: true
  become_user: root

  tasks:
    - name: Update apt repository
      apt:
        update_cache: yes
        autoclean: yes
        autoremove: yes
    - name: Install - git, apache2, unzip, curl
      apt:
        pkg:
        - apache2
        - git
        - unzip
        - curl
        - ufw

    - name: Install software properties
      command: apt install -y software-properties-common

    - name: Add apt repository for PHP
      command: add-apt-repository -y ppa:ondrej/php -y

    - name: Update apt repository
      apt:
        update_cache: yes
        autoclean: yes
    
    - name: Install PHP
      command: apt install --no-install-recommends php8.1 -y

    - name: Update apt repository
      apt:
        update_cache: yes
        autoclean: yes

    - name: Install PHP modules
      apt:
        pkg:
        - php8.1-common
        - php8.1-mysql
        - php8.1-xml
        - php8.1-xmlrpc
        - php8.1-curl
        - php8.1-gd
        - php8.1-imagick
        - php8.1-cli
        - php8.1-dev
        - php8.1-imap
        - php8.1-mbstring
        - php8.1-opcache
        - php8.1-soap
        - php8.1-zip
        - php8.1-intl
        - libapache2-mod-php

    - name: Update apt repository
      apt:
        update_cache: true
        autoclean: true 

    - name: Install Python3
      apt:
        name: python3
        state: latest

    - name: Install pip
      apt:
        name: pip
        state: latest

    - name: Install mysql server
      apt:
        name: mysql-server
        state: latest

    - name: Install mysql client
      apt:
        name: mysql-client
        state: latest

    - name: Install PyMSQl library
      pip:
        name: pymysql
        state: latest

    - name: Start the Mysql service
      service:
        name: mysql
        state: started
        enabled: true

    - name: Ensure mySQL is running
      service: name=mysql state=started enabled=true

    # - name: Run SQL query to configure root
    #   command:  mysql -u root --execute="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '"Tunray7&"';"

    - name: Create my.cnf file
      file:
        path: ~/.my.cnf
        state: touch

    - name: Insert variables into my.cnf
      blockinfile:
        path: ~/.my.cnf
        block: |
          [client]
          user=tunrayo
          password=Tunray7&

    - name: Run sql query to flush privileges
      command:  mysql -u root --execute="FLUSH PRIVILEGES"

    - name: Create database to hold project data
      mysql_db:
        login_user: 'root'
        login_password: "Tunray7&"
        name: "altschoolexam"
        state: present

    - name: Create new database user
      mysql_user:
        login_user: 'root'
        login_password: "Tunray7&"
        name: "tunrayo"
        password: "Echodu7&"
        host: localhost
        priv: 'altschoolexam.*:ALL,GRANT'

    - name: Restart Mysql
      service: name=mysql state=restarted   

    - name: Allow http
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow https
      ufw:
        rule: allow
        port: "443"
        proto: tcp
    
    - name: Allow SSH
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Allow mysql
      ufw:
        rule: allow
        port: "3306"
        proto: tcp

    - name: Create working directory
      command: mkdir AltschoolExam
      args:
        chdir: /var/www/
        creates: AltschoolExam

    - name: Clone the project repository
      git:
        repo: https://github.com/f1amy/laravel-realworld-example-app.git
        dest: /var/www/AltschoolExam
        clone: true
        update: false

    - name: configure the .env file
      ansible.builtin.copy:
        dest: /var/www/AltschoolExam/.env
        content: |
          APP_NAME="Altschool Exam"
          APP_ENV=local
          APP_KEY=
          APP_DEBUG=true
          APP_URL=http://localhost
          APP_PORT=3000

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug

          DB_CONNECTION=mysql
          DB_HOST=localhost
          DB_PORT=3306
          DB_DATABASE=altschoolexam
          DB_USERNAME=root
          DB_PASSWORD=Tunray7&

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120

          MEMCACHED_HOST=127.0.0.1

          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=smtp
          MAIL_HOST=mailhog
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_APP_CLUSTER=mt1

          MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

          L5_SWAGGER_GENERATE_ALWAYS=true
          SAIL_XDEBUG_MODE=develop,debug
          SAIL_SKIP_CHECKS=true


    - name: Create a web.php file in the routes directory
      ansible.builtin.copy:
        dest: /var/www/AltschoolExam/routes/web.php
        content: |
          <?php

          Route::get('/', function () {
              return view('welcome');
          });

    - name: Install Composer
      ansible.builtin.shell: curl -sS https://getcomposer.org/installer | php
      args:
        chdir: /var/www/AltschoolExam

    - name: Copy the downloaded  binary to the system directory
      ansible.builtin.command: mv composer.phar /usr/local/bin/composer
      args:
        chdir: /var/www/AltschoolExam

    - name: Give binary execute permission
      ansible.builtin.file:
        path: /usr/local/bin/composer
        mode: '755'

    - name: Install Composer
      ansible.builtin.shell: composer install --no-interaction
      args:
        chdir: /var/www/AltschoolExam

    - name: Generate APP_KEY value
      ansible.builtin.shell: php artisan key:generate
      args:
        chdir: /var/www/AltschoolExam

    - name: Run php artisan:cache command
      ansible.builtin.shell: php artisan config:cache
      args:
        chdir: /var/www/AltschoolExam

    # - name: Seed the database
    #   ansible.builtin.shell: php artisan migrate --seed
    #   args:
    #     chdir: /var/www/AltschoolExam

    - name: Create an Apache virtual host configuration file
      ansible.builtin.copy:
        dest: /etc/apache2/sites-available/AltschoolExam.conf
        content: |
          <VirtualHost *:80>
              ServerAdmin admin@motunrayoilawole.live
              ServerName motunrayoilawole.live
              DocumentRoot /var/www/AltschoolExam/public
    
              <Directory /var/www/AltschoolExam/public>
                  AllowOverride All
              </Directory>
    
              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>

    - name: Give our web group control of the Laravel directory
      ansible.builtin.file:
        path: /var/www/AltschoolExam
        state: directory
        recurse: true
        owner: www-data
        group: www-data
        mode: '775'

    - name: Enable Apache rewrite module
      ansible.builtin.command: a2enmod rewrite

    - name: Activate laravel virtual host
      ansible.builtin.command: a2dissite 000-default.conf

    - name: Enable laravel page
      ansible.builtin.command: a2ensite AltschoolExam.conf

    - name: Restart Apache service
      ansible.builtin.command: systemctl restart apache2

    - name: Change timezone
      timezone:
        name: Africa/Lagos